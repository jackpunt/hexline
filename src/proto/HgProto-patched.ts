/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: HgProto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum HgType {
    none = 0,
    makeMove = 1,
    sendMove = 2,
    progress = 3,
    setParam = 4
}
export class HgMessage extends pb_1.Message {
    constructor(data?: any[] | {
        type?: HgType;
        client?: number;
        player?: number;
        json?: string;
        name?: string;
        inform?: string;
        clientto?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("client" in data && data.client != undefined) {
                this.client = data.client;
            }
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
            if ("json" in data && data.json != undefined) {
                this.json = data.json;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("inform" in data && data.inform != undefined) {
                this.inform = data.inform;
            }
            if ("clientto" in data && data.clientto != undefined) {
                this.clientto = data.clientto;
            }
        }
    }
    get type() {
        return pb_1.Message.getField(this, 1) as HgType;
    }
    set type(value: HgType) {
        pb_1.Message.setField(this, 1, value);
    }
    get client() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set client(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get player() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set player(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get json() {
        return pb_1.Message.getField(this, 4) as string;
    }
    set json(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get name() {
        return pb_1.Message.getField(this, 6) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get inform() {
        return pb_1.Message.getField(this, 7) as string;
    }
    set inform(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get clientto() {
        return pb_1.Message.getField(this, 11) as number;
    }
    set clientto(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        type?: HgType;
        client?: number;
        player?: number;
        json?: string;
        name?: string;
        inform?: string;
        clientto?: number;
    }) {
        const message = new HgMessage({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.client != null) {
            message.client = data.client;
        }
        if (data.player != null) {
            message.player = data.player;
        }
        if (data.json != null) {
            message.json = data.json;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.inform != null) {
            message.inform = data.inform;
        }
        if (data.clientto != null) {
            message.clientto = data.clientto;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: HgType;
            client?: number;
            player?: number;
            json?: string;
            name?: string;
            inform?: string;
            clientto?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.client != null) {
            data.client = this.client;
        }
        if (this.player != null) {
            data.player = this.player;
        }
        if (this.json != null) {
            data.json = this.json;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.inform != null) {
            data.inform = this.inform;
        }
        if (this.clientto != null) {
            data.clientto = this.clientto;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type !== undefined)
            writer.writeEnum(1, this.type);
        if (this.client !== undefined)
            writer.writeInt32(2, this.client);
        if (this.player !== undefined)
            writer.writeInt32(3, this.player);
        if (typeof this.json === "string" && this.json.length)
            writer.writeString(4, this.json);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(6, this.name);
        if (typeof this.inform === "string" && this.inform.length)
            writer.writeString(7, this.inform);
        if (this.clientto !== undefined)
            writer.writeInt32(11, this.clientto);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HgMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HgMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.client = reader.readInt32();
                    break;
                case 3:
                    message.player = reader.readInt32();
                    break;
                case 4:
                    message.json = reader.readString();
                    break;
                case 6:
                    message.name = reader.readString();
                    break;
                case 7:
                    message.inform = reader.readString();
                    break;
                case 11:
                    message.clientto = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): HgMessage {
        return HgMessage.deserialize(bytes);
    }
}
