"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.HgMessage = exports.Rost = exports.HgType = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: HgProto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
var pb_1 = require("google-protobuf");
var HgType;
(function (HgType) {
    HgType[HgType["none"] = 0] = "none";
    HgType[HgType["makeMove"] = 1] = "makeMove";
    HgType[HgType["sendMove"] = 2] = "sendMove";
    HgType[HgType["progress"] = 3] = "progress";
    HgType[HgType["setParam"] = 4] = "setParam";
    HgType[HgType["undo"] = 7] = "undo";
    HgType[HgType["join"] = 8] = "join";
    HgType[HgType["chat"] = 9] = "chat";
})(HgType = exports.HgType || (exports.HgType = {}));
var Rost = /** @class */ (function (_super) {
    __extends(Rost, _super);
    function Rost(data) {
        var _this = _super.call(this) || this;
        pb_1.Message.initialize(_this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                _this.player = data.player;
            }
            if ("client" in data && data.client != undefined) {
                _this.client = data.client;
            }
            if ("name" in data && data.name != undefined) {
                _this.name = data.name;
            }
        }
        return _this;
    }
    Object.defineProperty(Rost.prototype, "player", {
        get: function () {
            return pb_1.Message.getField(this, 2);
        },
        set: function (value) {
            pb_1.Message.setField(this, 2, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rost.prototype, "client", {
        get: function () {
            return pb_1.Message.getField(this, 3);
        },
        set: function (value) {
            pb_1.Message.setField(this, 3, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rost.prototype, "name", {
        get: function () {
            return pb_1.Message.getField(this, 4);
        },
        set: function (value) {
            pb_1.Message.setField(this, 4, value);
        },
        enumerable: false,
        configurable: true
    });
    Rost.fromObject = function (data) {
        var message = new Rost({});
        if (data.player != null) {
            message.player = data.player;
        }
        if (data.client != null) {
            message.client = data.client;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    };
    Rost.prototype.toObject = function () {
        var data = {};
        if (this.player != null) {
            data.player = this.player;
        }
        if (this.client != null) {
            data.client = this.client;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    };
    Rost.prototype.serialize = function (w) {
        var writer = w || new pb_1.BinaryWriter();
        if (this.player !== undefined)
            writer.writeInt32(2, this.player);
        if (this.client !== undefined)
            writer.writeInt32(3, this.client);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(4, this.name);
        if (!w)
            return writer.getResultBuffer();
    };
    Rost.deserialize = function (bytes) {
        var reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rost();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.player = reader.readInt32();
                    break;
                case 3:
                    message.client = reader.readInt32();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    };
    Rost.prototype.serializeBinary = function () {
        return this.serialize();
    };
    Rost.deserializeBinary = function (bytes) {
        return Rost.deserialize(bytes);
    };
    return Rost;
}(pb_1.Message));
exports.Rost = Rost;
var HgMessage = /** @class */ (function (_super) {
    __extends(HgMessage, _super);
    function HgMessage(data) {
        var _this = _super.call(this) || this;
        pb_1.Message.initialize(_this, Array.isArray(data) ? data : [], 0, -1, [10], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                _this.type = data.type;
            }
            if ("client" in data && data.client != undefined) {
                _this.client = data.client;
            }
            if ("player" in data && data.player != undefined) {
                _this.player = data.player;
            }
            if ("name" in data && data.name != undefined) {
                _this.name = data.name;
            }
            if ("json" in data && data.json != undefined) {
                _this.json = data.json;
            }
            if ("inform" in data && data.inform != undefined) {
                _this.inform = data.inform;
            }
            if ("roster" in data && data.roster != undefined) {
                _this.roster = data.roster;
            }
            if ("clientto" in data && data.clientto != undefined) {
                _this.clientto = data.clientto;
            }
        }
        return _this;
    }
    Object.defineProperty(HgMessage.prototype, "type", {
        get: function () {
            return pb_1.Message.getField(this, 1);
        },
        set: function (value) {
            pb_1.Message.setField(this, 1, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "client", {
        get: function () {
            return pb_1.Message.getField(this, 2);
        },
        set: function (value) {
            pb_1.Message.setField(this, 2, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "player", {
        get: function () {
            return pb_1.Message.getField(this, 3);
        },
        set: function (value) {
            pb_1.Message.setField(this, 3, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "name", {
        get: function () {
            return pb_1.Message.getField(this, 4);
        },
        set: function (value) {
            pb_1.Message.setField(this, 4, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "json", {
        get: function () {
            return pb_1.Message.getField(this, 5);
        },
        set: function (value) {
            pb_1.Message.setField(this, 5, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "inform", {
        get: function () {
            return pb_1.Message.getField(this, 7);
        },
        set: function (value) {
            pb_1.Message.setField(this, 7, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "roster", {
        get: function () {
            return pb_1.Message.getRepeatedWrapperField(this, Rost, 10);
        },
        set: function (value) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HgMessage.prototype, "clientto", {
        get: function () {
            return pb_1.Message.getField(this, 11);
        },
        set: function (value) {
            pb_1.Message.setField(this, 11, value);
        },
        enumerable: false,
        configurable: true
    });
    HgMessage.fromObject = function (data) {
        var message = new HgMessage({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.client != null) {
            message.client = data.client;
        }
        if (data.player != null) {
            message.player = data.player;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.json != null) {
            message.json = data.json;
        }
        if (data.inform != null) {
            message.inform = data.inform;
        }
        if (data.roster != null) {
            message.roster = data.roster.map(function (item) { return Rost.fromObject(item); });
        }
        if (data.clientto != null) {
            message.clientto = data.clientto;
        }
        return message;
    };
    HgMessage.prototype.toObject = function () {
        var data = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.client != null) {
            data.client = this.client;
        }
        if (this.player != null) {
            data.player = this.player;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.json != null) {
            data.json = this.json;
        }
        if (this.inform != null) {
            data.inform = this.inform;
        }
        if (this.roster != null) {
            data.roster = this.roster.map(function (item) { return item.toObject(); });
        }
        if (this.clientto != null) {
            data.clientto = this.clientto;
        }
        return data;
    };
    HgMessage.prototype.serialize = function (w) {
        var writer = w || new pb_1.BinaryWriter();
        if (this.type !== undefined)
            writer.writeEnum(1, this.type);
        if (this.client !== undefined)
            writer.writeInt32(2, this.client);
        if (this.player !== undefined)
            writer.writeInt32(3, this.player);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(4, this.name);
        if (typeof this.json === "string" && this.json.length)
            writer.writeString(5, this.json);
        if (typeof this.inform === "string" && this.inform.length)
            writer.writeString(7, this.inform);
        if (this.roster !== undefined)
            writer.writeRepeatedMessage(10, this.roster, function (item) { return item.serialize(writer); });
        if (this.clientto !== undefined)
            writer.writeInt32(11, this.clientto);
        if (!w)
            return writer.getResultBuffer();
    };
    HgMessage.deserialize = function (bytes) {
        var reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HgMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.client = reader.readInt32();
                    break;
                case 3:
                    message.player = reader.readInt32();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.json = reader.readString();
                    break;
                case 7:
                    message.inform = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.roster, function () { return pb_1.Message.addToRepeatedWrapperField(message, 10, Rost.deserialize(reader), Rost); });
                    break;
                case 11:
                    message.clientto = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    };
    HgMessage.prototype.serializeBinary = function () {
        return this.serialize();
    };
    HgMessage.deserializeBinary = function (bytes) {
        return HgMessage.deserialize(bytes);
    };
    return HgMessage;
}(pb_1.Message));
exports.HgMessage = HgMessage;
